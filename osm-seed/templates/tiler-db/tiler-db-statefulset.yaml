{{- if .Values.tilerDb.enabled -}}
{{- if not .Values.tilerDb.useExternalHost.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-tiler-db
  labels:
    app: {{ .Release.Name }}-tiler-db
    component: db-tiler-statefulset
    environment: {{ .Values.environment }}
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-tiler-db
      release: {{ .Release.Name }}
      run: {{ .Release.Name }}-tiler-db
  serviceName: {{ .Release.Name }}-tiler-db
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-tiler-db
        release: {{ .Release.Name }}
        run: {{ .Release.Name }}-tiler-db
    spec:
      containers:
        - name: {{ .Chart.Name }}-tiler-db
          image: "{{ .Values.tilerDb.image.name }}:{{ .Values.tilerDb.image.tag }}"
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-tiler-db-cm
          env:
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
           {{- if and .Values.tilerDb.postgresqlConfig.enabled .Values.tilerDb.persistenceDisk.enabled }}
          command:
            - "sh"
            - "-c"
            - "su postgres -c 'postgres -c config_file=/etc/postgresql/postgresql.conf'"
           {{- end }}
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            initialDelaySeconds: 120
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          volumeMounts:
            - name: postgres-storage
              mountPath: {{ .Values.tilerDb.persistenceDisk.mountPath }}
              subPath: {{ .Values.tilerDb.persistenceDisk.subPath }}
            {{- if and .Values.tilerDb.postgresqlConfig.enabled .Values.tilerDb.persistenceDisk.enabled }}
            - name: tiler-db-postgresql-config
              mountPath: /etc/postgresql/
            {{- end }}
            - name: shared-memory
              mountPath: /dev/shm
          {{- if .Values.tilerDb.resources.enabled }}
          resources:
            requests:
              memory: {{ .Values.tilerDb.resources.requests.memory }}
              cpu: {{ .Values.tilerDb.resources.requests.cpu }}
            limits:
              memory: {{ .Values.tilerDb.resources.limits.memory }}
              cpu: {{ .Values.tilerDb.resources.limits.cpu }}
          {{- end }}
      volumes:
        - name: postgres-storage
        {{- if .Values.tilerDb.persistenceDisk.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-tiler-db-pv-claim
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if and .Values.tilerDb.postgresqlConfig.enabled .Values.tilerDb.persistenceDisk.enabled }}
        - name: tiler-db-postgresql-config
          configMap:
            name: {{ .Release.Name }}-tiler-db-postgresql-config
        {{- end }}
        - name: shared-memory
          emptyDir:
            medium: Memory
            sizeLimit: {{ .Values.tilerDb.sharedMemorySize | default "64Mi" }}
      {{- if .Values.tilerDb.nodeSelector.enabled }}
      nodeSelector:
        {{ .Values.tilerDb.nodeSelector.label_key }} : {{ .Values.tilerDb.nodeSelector.label_value }}
      {{- end }}
{{- end }}
{{- end }}
